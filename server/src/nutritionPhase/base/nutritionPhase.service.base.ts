/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, NutritionPhase, Recipe } from "@prisma/client";

export class NutritionPhaseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.NutritionPhaseFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.NutritionPhaseFindManyArgs>
  ): Promise<number> {
    return this.prisma.nutritionPhase.count(args);
  }

  async findMany<T extends Prisma.NutritionPhaseFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.NutritionPhaseFindManyArgs>
  ): Promise<NutritionPhase[]> {
    return this.prisma.nutritionPhase.findMany(args);
  }
  async findOne<T extends Prisma.NutritionPhaseFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NutritionPhaseFindUniqueArgs>
  ): Promise<NutritionPhase | null> {
    return this.prisma.nutritionPhase.findUnique(args);
  }
  async create<T extends Prisma.NutritionPhaseCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NutritionPhaseCreateArgs>
  ): Promise<NutritionPhase> {
    return this.prisma.nutritionPhase.create<T>(args);
  }
  async update<T extends Prisma.NutritionPhaseUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NutritionPhaseUpdateArgs>
  ): Promise<NutritionPhase> {
    return this.prisma.nutritionPhase.update<T>(args);
  }
  async delete<T extends Prisma.NutritionPhaseDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.NutritionPhaseDeleteArgs>
  ): Promise<NutritionPhase> {
    return this.prisma.nutritionPhase.delete(args);
  }

  async findRecipes(
    parentId: string,
    args: Prisma.RecipeFindManyArgs
  ): Promise<Recipe[]> {
    return this.prisma.nutritionPhase
      .findUnique({
        where: { id: parentId },
      })
      .recipes(args);
  }
}
