/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, NutritionPlan, Tip, Goal } from "@prisma/client";

export class NutritionPlanServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.NutritionPlanFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.NutritionPlanFindManyArgs>
  ): Promise<number> {
    return this.prisma.nutritionPlan.count(args);
  }

  async findMany<T extends Prisma.NutritionPlanFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.NutritionPlanFindManyArgs>
  ): Promise<NutritionPlan[]> {
    return this.prisma.nutritionPlan.findMany(args);
  }
  async findOne<T extends Prisma.NutritionPlanFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NutritionPlanFindUniqueArgs>
  ): Promise<NutritionPlan | null> {
    return this.prisma.nutritionPlan.findUnique(args);
  }
  async create<T extends Prisma.NutritionPlanCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NutritionPlanCreateArgs>
  ): Promise<NutritionPlan> {
    return this.prisma.nutritionPlan.create<T>(args);
  }
  async update<T extends Prisma.NutritionPlanUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NutritionPlanUpdateArgs>
  ): Promise<NutritionPlan> {
    return this.prisma.nutritionPlan.update<T>(args);
  }
  async delete<T extends Prisma.NutritionPlanDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.NutritionPlanDeleteArgs>
  ): Promise<NutritionPlan> {
    return this.prisma.nutritionPlan.delete(args);
  }

  async findTips(
    parentId: string,
    args: Prisma.TipFindManyArgs
  ): Promise<Tip[]> {
    return this.prisma.nutritionPlan
      .findUnique({
        where: { id: parentId },
      })
      .tips(args);
  }

  async getGoal(parentId: string): Promise<Goal | null> {
    return this.prisma.nutritionPlan
      .findUnique({
        where: { id: parentId },
      })
      .goal();
  }
}
