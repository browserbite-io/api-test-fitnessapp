/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import {
  Prisma,
  Location,
  Notification,
  User,
  WorkoutPlan,
} from "@prisma/client";

export class LocationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.LocationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LocationFindManyArgs>
  ): Promise<number> {
    return this.prisma.location.count(args);
  }

  async findMany<T extends Prisma.LocationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LocationFindManyArgs>
  ): Promise<Location[]> {
    return this.prisma.location.findMany(args);
  }
  async findOne<T extends Prisma.LocationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LocationFindUniqueArgs>
  ): Promise<Location | null> {
    return this.prisma.location.findUnique(args);
  }
  async create<T extends Prisma.LocationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LocationCreateArgs>
  ): Promise<Location> {
    return this.prisma.location.create<T>(args);
  }
  async update<T extends Prisma.LocationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LocationUpdateArgs>
  ): Promise<Location> {
    return this.prisma.location.update<T>(args);
  }
  async delete<T extends Prisma.LocationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LocationDeleteArgs>
  ): Promise<Location> {
    return this.prisma.location.delete(args);
  }

  async findNotifications(
    parentId: string,
    args: Prisma.NotificationFindManyArgs
  ): Promise<Notification[]> {
    return this.prisma.location
      .findUnique({
        where: { id: parentId },
      })
      .notifications(args);
  }

  async findUsers(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<User[]> {
    return this.prisma.location
      .findUnique({
        where: { id: parentId },
      })
      .users(args);
  }

  async findWorkoutPlans(
    parentId: string,
    args: Prisma.WorkoutPlanFindManyArgs
  ): Promise<WorkoutPlan[]> {
    return this.prisma.location
      .findUnique({
        where: { id: parentId },
      })
      .workoutPlans(args);
  }
}
