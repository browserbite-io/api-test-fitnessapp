/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, Exercise, WorkoutDay } from "@prisma/client";

export class ExerciseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ExerciseFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExerciseFindManyArgs>
  ): Promise<number> {
    return this.prisma.exercise.count(args);
  }

  async findMany<T extends Prisma.ExerciseFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExerciseFindManyArgs>
  ): Promise<Exercise[]> {
    return this.prisma.exercise.findMany(args);
  }
  async findOne<T extends Prisma.ExerciseFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExerciseFindUniqueArgs>
  ): Promise<Exercise | null> {
    return this.prisma.exercise.findUnique(args);
  }
  async create<T extends Prisma.ExerciseCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExerciseCreateArgs>
  ): Promise<Exercise> {
    return this.prisma.exercise.create<T>(args);
  }
  async update<T extends Prisma.ExerciseUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExerciseUpdateArgs>
  ): Promise<Exercise> {
    return this.prisma.exercise.update<T>(args);
  }
  async delete<T extends Prisma.ExerciseDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExerciseDeleteArgs>
  ): Promise<Exercise> {
    return this.prisma.exercise.delete(args);
  }

  async getWorkoutDay(parentId: string): Promise<WorkoutDay | null> {
    return this.prisma.exercise
      .findUnique({
        where: { id: parentId },
      })
      .workoutDay();
  }
}
